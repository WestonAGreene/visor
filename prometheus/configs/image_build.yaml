apiVersion: v1
kind: Template
parameters:
- name: APP_NAME  # The application name used to group the template's objects. # defined from /REDACTED/REDACTED/src/com/redhat/mktg_ops/pipeline/DeployApp.groovy; which is determined by the JJB parameter
- name: APP_NAME_PROXY
  value: proxy  # matches name of folder REDACTED/visor/prometheus/proxy
- name: IMAGE_BASE_URI  # The uri of the base image in red hat container catalog https://access.redhat.com/containers; ex. REDACTED.redhat.com/rhscl/python-36-rhel7
  value: REDACTED.redhat.com/rhscl/python-36-rhel7
- name: OPENSHIFT_NAMESPACE   # The OpenShift project that the template is being applied to
  value: visor
- name: REPO_URI
  value: https://REDACTED.redhat.com/REDACTED/visor.git
- name: REPO_SECRET_NAME  # Name of secret to contain the credentials to pull from project repo
  value: REDACTED
- name: IMAGE_S2I_SECRET  # The secret used by the builder to access the registry
  value: REDACTED # REDACTED  # this secret was created automatically for me
- name: IMAGE_SOURCE_FOUNDATION  # The first portion of the image tag name
  value: REDACTED.redhat.com

#  parameters from /REDACTED/REDACTED/src/com/redhat/mktg_ops/pipeline/DeployApp.groovy
# Why not use the parameters already in DeployApp? I didn't like the naming convention
- name: IMAGE
- name: NAME_SPACE
- name: BRANCH  # git branch in the repo  # defined from /REDACTED/REDACTED/src/com/redhat/mktg_ops/pipeline/DeployApp.groovy; which is determined by the JJB parameter
- name: QA_SECRET_SWITCH
- name: REGISTRY_SECRET
- name: OUTPUT_IMAGE


metadata:
  name: ${APP_NAME}
  template: ${APP_NAME}

labels:  # having the labels inline with the object's tabbing means the labels are applied to every object
  app: ${APP_NAME}
  namespace: ${OPENSHIFT_NAMESPACE}


objects:

# - kind: BuildConfig
#   apiVersion: v1
#   metadata:
#     name: ${APP_NAME}-${APP_NAME_PROXY}
#     namespace: ${NAME_SPACE}
#     annotations:
#       template.alpha.openshift.io/wait-for-ready: "true"
#   spec:
#     output:
#       to:
#         kind: DockerImage
#         name: ${IMAGE_SOURCE_FOUNDATION}/${OPENSHIFT_NAMESPACE}/${APP_NAME}-${APP_NAME_PROXY}:${BRANCH}  # ex: REDACTED.redhat.com/REDACTED/audit-service:3.1.0-SNAPSHOT
#       pushSecret:
#         name: ${IMAGE_S2I_SECRET}
#     postCommit: {}
#     resources: {}
#     runPolicy: Serial
#     source:
#       contextDir: /${APP_NAME}/${APP_NAME_PROXY}
#       git:
#         ref: ${BRANCH}
#         uri: ${REPO_URI}
#       sourceSecret:
#         name: ${REPO_SECRET_NAME}
#       type: Git
#     strategy:
#       sourceStrategy:
#         env:
#         - name: HTTP_PROXY
#           value: REDACTED.redhat.com:000
#         - name: HTTPS_PROXY
#           value: REDACTED.redhat.com:000
#         from:
#           kind: DockerImage
#           name: REDACTED.redhat.com/rhscl/python-36-rhel7
#       type: Source

- kind: BuildConfig
  apiVersion: v1
  metadata:
    name: ${APP_NAME}-${APP_NAME_PROXY}
    namespace: ${NAME_SPACE}
    annotations:
      template.alpha.openshift.io/wait-for-ready: "true"
  spec:
    output:
      to:
        kind: DockerImage
        name: ${IMAGE_SOURCE_FOUNDATION}/${OPENSHIFT_NAMESPACE}/${APP_NAME}-${APP_NAME_PROXY}:${BRANCH}  # ex: REDACTED.redhat.com/REDACTED/audit-service:3.1.0-SNAPSHOT
      pushSecret:
        name: ${IMAGE_S2I_SECRET}
    postCommit: {}
    resources: {}
    runPolicy: Serial
    source:
      contextDir: /${APP_NAME}/${APP_NAME_PROXY}
      git:
        ref: ${BRANCH}
        uri: ${REPO_URI}
      sourceSecret:
        name: ${REPO_SECRET_NAME}
      type: Git
    strategy:
      sourceStrategy:
        env:
        - name: HTTP_PROXY
          value: REDACTED.redhat.com:000
        - name: HTTPS_PROXY
          value: REDACTED.redhat.com:000
        from:
          kind: DockerImage
          name: REDACTED.redhat.com/rhscl/nginx-000-rhel7
      type: Source

# - kind: BuildConfig
#   apiVersion: v1
#   metadata:
#     labels:
#       app: ${APP_NAME}
#       namespace: ${NAME_SPACE}
#       annotations:
#         template.alpha.openshift.io/wait-for-ready: "true"
#   spec:
#     output:
#       to:
#         kind: DockerImage
#         name: ${OUTPUT_IMAGE}-prometheus:${BRANCH}
#       pushSecret:
#         name: ${REGISTRY_SECRET}
#     postCommit: {}
#     resources: {}
#     runPolicy: Serial
#     source:
#       git:
#         ref: ${BRANCH}
#         uri: ${REPO_URI}
#       sourceSecret:
#         name: ${SOURCE_SECRET}
#       contextDir: prometheus
#       type: Git
#     strategy:
#       dockerStrategy:
#         from:
#           kind: DockerImage
#           name: REDACTED.redhat.com/openshfit3/prometheus
